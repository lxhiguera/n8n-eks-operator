name: Dependency Update

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        type: choice
        options:
          - all
          - go-modules
          - docker-images
          - github-actions
        default: all
      create_pr:
        description: 'Create pull request for updates'
        required: false
        type: boolean
        default: true

env:
  GO_VERSION: '1.19'

jobs:
  # Update Go modules
  update-go-modules:
    name: Update Go Modules
    runs-on: ubuntu-latest
    if: github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'go-modules' || github.event_name == 'schedule'
    outputs:
      has-changes: ${{ steps.check-changes.outputs.has-changes }}
      pr-branch: ${{ steps.create-branch.outputs.branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Create update branch
        id: create-branch
        run: |
          BRANCH="dependency-update/go-modules-$(date +%Y%m%d)"
          git checkout -b "$BRANCH"
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          
      - name: Update Go modules
        run: |
          echo "Updating Go modules..."
          
          # Update all dependencies
          go get -u ./...
          go mod tidy
          
          # Run tests to ensure updates don't break anything
          go test ./... -short
          
      - name: Update Go version in workflows
        run: |
          # Check for newer Go version
          LATEST_GO=$(curl -s https://go.dev/VERSION?m=text | head -1)
          CURRENT_GO="go${{ env.GO_VERSION }}"
          
          if [ "$LATEST_GO" != "$CURRENT_GO" ]; then
            echo "Updating Go version from $CURRENT_GO to $LATEST_GO"
            
            # Update in workflows
            find .github/workflows -name "*.yml" -exec sed -i "s/GO_VERSION: '[0-9.]*'/GO_VERSION: '${LATEST_GO#go}'/g" {} \;
            
            # Update in Dockerfile
            if [ -f Dockerfile ]; then
              sed -i "s/golang:[0-9.]*/golang:${LATEST_GO#go}/g" Dockerfile
            fi
            
            # Update in go.mod
            go mod edit -go=${LATEST_GO#go}
            go mod tidy
          fi
          
      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No Go module updates available"
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Go module updates found"
            git diff --name-only
          fi
          
      - name: Commit changes
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "chore: update Go modules and dependencies
          
          - Updated Go modules to latest versions
          - Updated Go version if newer version available
          - Ran tests to ensure compatibility
          
          Auto-generated by dependency update workflow"
          
      - name: Push changes
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          git push origin ${{ steps.create-branch.outputs.branch }}

  # Update Docker base images
  update-docker-images:
    name: Update Docker Images
    runs-on: ubuntu-latest
    if: github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'docker-images' || github.event_name == 'schedule'
    outputs:
      has-changes: ${{ steps.check-changes.outputs.has-changes }}
      pr-branch: ${{ steps.create-branch.outputs.branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create update branch
        id: create-branch
        run: |
          BRANCH="dependency-update/docker-images-$(date +%Y%m%d)"
          git checkout -b "$BRANCH"
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          
      - name: Update Dockerfile base images
        run: |
          echo "Updating Docker base images..."
          
          if [ -f Dockerfile ]; then
            # Update Go base image
            LATEST_GO_IMAGE=$(curl -s "https://registry.hub.docker.com/v2/repositories/library/golang/tags/?page_size=100" | jq -r '.results[] | select(.name | test("^[0-9]+\\.[0-9]+$")) | .name' | sort -V | tail -1)
            if [ -n "$LATEST_GO_IMAGE" ]; then
              sed -i "s/FROM golang:[0-9.]*/FROM golang:$LATEST_GO_IMAGE/g" Dockerfile
            fi
            
            # Update distroless base image
            LATEST_DISTROLESS=$(curl -s "https://gcr.io/v2/distroless/static/tags/list" | jq -r '.tags[]' | grep -E '^[0-9]+$' | sort -n | tail -1)
            if [ -n "$LATEST_DISTROLESS" ]; then
              sed -i "s/FROM gcr.io\/distroless\/static:.*/FROM gcr.io\/distroless\/static:$LATEST_DISTROLESS/g" Dockerfile
            fi
          fi
          
      - name: Update workflow Docker images
        run: |
          echo "Updating workflow Docker images..."
          
          # Update PostgreSQL version in workflows
          LATEST_POSTGRES=$(curl -s "https://registry.hub.docker.com/v2/repositories/library/postgres/tags/?page_size=100" | jq -r '.results[] | select(.name | test("^[0-9]+$")) | .name' | sort -n | tail -1)
          if [ -n "$LATEST_POSTGRES" ]; then
            find .github/workflows -name "*.yml" -exec sed -i "s/postgres:[0-9]*/postgres:$LATEST_POSTGRES/g" {} \;
          fi
          
          # Update Redis version in workflows
          LATEST_REDIS=$(curl -s "https://registry.hub.docker.com/v2/repositories/library/redis/tags/?page_size=100" | jq -r '.results[] | select(.name | test("^[0-9]+$")) | .name' | sort -n | tail -1)
          if [ -n "$LATEST_REDIS" ]; then
            find .github/workflows -name "*.yml" -exec sed -i "s/redis:[0-9]*/redis:$LATEST_REDIS/g" {} \;
          fi
          
      - name: Test Docker build
        if: hashFiles('Dockerfile') != ''
        run: |
          echo "Testing Docker build with updated images..."
          docker build -t test-build .
          
      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No Docker image updates available"
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Docker image updates found"
            git diff --name-only
          fi
          
      - name: Commit changes
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "chore: update Docker base images
          
          - Updated Go base image to latest version
          - Updated distroless base image to latest version
          - Updated PostgreSQL and Redis images in workflows
          - Tested Docker build with updated images
          
          Auto-generated by dependency update workflow"
          
      - name: Push changes
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          git push origin ${{ steps.create-branch.outputs.branch }}

  # Update GitHub Actions
  update-github-actions:
    name: Update GitHub Actions
    runs-on: ubuntu-latest
    if: github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'github-actions' || github.event_name == 'schedule'
    outputs:
      has-changes: ${{ steps.check-changes.outputs.has-changes }}
      pr-branch: ${{ steps.create-branch.outputs.branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create update branch
        id: create-branch
        run: |
          BRANCH="dependency-update/github-actions-$(date +%Y%m%d)"
          git checkout -b "$BRANCH"
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          
      - name: Update GitHub Actions
        run: |
          echo "Updating GitHub Actions to latest versions..."
          
          # Common actions to update
          declare -A actions=(
            ["actions/checkout"]="v4"
            ["actions/setup-go"]="v4"
            ["actions/upload-artifact"]="v3"
            ["actions/download-artifact"]="v3"
            ["docker/setup-buildx-action"]="v3"
            ["docker/login-action"]="v3"
            ["docker/build-push-action"]="v5"
            ["docker/metadata-action"]="v5"
            ["azure/setup-kubectl"]="v3"
            ["azure/setup-helm"]="v3"
            ["aws-actions/configure-aws-credentials"]="v4"
            ["golangci/golangci-lint-action"]="v3"
            ["codecov/codecov-action"]="v3"
            ["aquasecurity/trivy-action"]="master"
            ["github/codeql-action/upload-sarif"]="v2"
            ["softprops/action-gh-release"]="v1"
            ["8398a7/action-slack"]="v3"
            ["helm/kind-action"]="v1.8.0"
          )
          
          # Update each action in all workflow files
          for action in "${!actions[@]}"; do
            version="${actions[$action]}"
            echo "Updating $action to $version"
            
            find .github/workflows -name "*.yml" -exec sed -i "s|uses: $action@[^[:space:]]*|uses: $action@$version|g" {} \;
          done
          
      - name: Validate workflow syntax
        run: |
          echo "Validating workflow syntax..."
          
          # Install actionlint for workflow validation
          curl -s https://raw.githubusercontent.com/rhymond/actionlint/main/scripts/download-actionlint.bash | bash
          
          # Validate all workflows
          for workflow in .github/workflows/*.yml; do
            echo "Validating $workflow"
            ./actionlint "$workflow"
          done
          
      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No GitHub Actions updates available"
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "GitHub Actions updates found"
            git diff --name-only
          fi
          
      - name: Commit changes
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "chore: update GitHub Actions to latest versions
          
          - Updated all GitHub Actions to their latest stable versions
          - Validated workflow syntax with actionlint
          - Ensured compatibility with current workflow structure
          
          Auto-generated by dependency update workflow"
          
      - name: Push changes
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          git push origin ${{ steps.create-branch.outputs.branch }}

  # Create pull request
  create-pull-request:
    name: Create Pull Request
    runs-on: ubuntu-latest
    needs: [update-go-modules, update-docker-images, update-github-actions]
    if: |
      always() && 
      (github.event.inputs.create_pr != 'false') &&
      (needs.update-go-modules.outputs.has-changes == 'true' || 
       needs.update-docker-images.outputs.has-changes == 'true' || 
       needs.update-github-actions.outputs.has-changes == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Determine primary branch
        id: determine-branch
        run: |
          # Use the first branch that has changes
          if [[ "${{ needs.update-go-modules.outputs.has-changes }}" == "true" ]]; then
            echo "branch=${{ needs.update-go-modules.outputs.pr-branch }}" >> $GITHUB_OUTPUT
            echo "title=chore: update Go modules and dependencies" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.update-docker-images.outputs.has-changes }}" == "true" ]]; then
            echo "branch=${{ needs.update-docker-images.outputs.pr-branch }}" >> $GITHUB_OUTPUT
            echo "title=chore: update Docker base images" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.update-github-actions.outputs.has-changes }}" == "true" ]]; then
            echo "branch=${{ needs.update-github-actions.outputs.pr-branch }}" >> $GITHUB_OUTPUT
            echo "title=chore: update GitHub Actions" >> $GITHUB_OUTPUT
          fi
          
      - name: Merge all update branches
        if: |
          needs.update-go-modules.outputs.has-changes == 'true' && 
          needs.update-docker-images.outputs.has-changes == 'true' || 
          needs.update-go-modules.outputs.has-changes == 'true' && 
          needs.update-github-actions.outputs.has-changes == 'true' ||
          needs.update-docker-images.outputs.has-changes == 'true' && 
          needs.update-github-actions.outputs.has-changes == 'true'
        run: |
          # Create a combined branch if multiple updates exist
          COMBINED_BRANCH="dependency-update/combined-$(date +%Y%m%d)"
          git checkout -b "$COMBINED_BRANCH"
          
          # Merge all update branches
          if [[ "${{ needs.update-go-modules.outputs.has-changes }}" == "true" ]]; then
            git merge origin/${{ needs.update-go-modules.outputs.pr-branch }} --no-edit
          fi
          
          if [[ "${{ needs.update-docker-images.outputs.has-changes }}" == "true" ]]; then
            git merge origin/${{ needs.update-docker-images.outputs.pr-branch }} --no-edit
          fi
          
          if [[ "${{ needs.update-github-actions.outputs.has-changes }}" == "true" ]]; then
            git merge origin/${{ needs.update-github-actions.outputs.pr-branch }} --no-edit
          fi
          
          git push origin "$COMBINED_BRANCH"
          echo "branch=$COMBINED_BRANCH" >> $GITHUB_OUTPUT
          echo "title=chore: update dependencies (Go modules, Docker images, GitHub Actions)" >> $GITHUB_OUTPUT
          
      - name: Create Pull Request
        uses: actions/github-script@v6
        with:
          script: |
            const branch = '${{ steps.determine-branch.outputs.branch }}';
            const title = '${{ steps.determine-branch.outputs.title }}';
            
            let body = `## Dependency Updates\n\nThis PR contains automated dependency updates:\n\n`;
            
            if ('${{ needs.update-go-modules.outputs.has-changes }}' === 'true') {
              body += `- ✅ **Go Modules**: Updated to latest versions\n`;
            }
            
            if ('${{ needs.update-docker-images.outputs.has-changes }}' === 'true') {
              body += `- ✅ **Docker Images**: Updated base images to latest versions\n`;
            }
            
            if ('${{ needs.update-github-actions.outputs.has-changes }}' === 'true') {
              body += `- ✅ **GitHub Actions**: Updated to latest stable versions\n`;
            }
            
            body += `\n## Testing\n\n`;
            body += `- [ ] Unit tests pass\n`;
            body += `- [ ] Integration tests pass\n`;
            body += `- [ ] Security tests pass\n`;
            body += `- [ ] Docker build succeeds\n`;
            body += `- [ ] Workflows validate successfully\n\n`;
            body += `## Notes\n\n`;
            body += `This PR was automatically generated by the dependency update workflow.\n`;
            body += `Please review the changes and run the full test suite before merging.\n\n`;
            body += `**Auto-merge**: This PR can be auto-merged if all checks pass and no breaking changes are detected.`;
            
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              head: branch,
              base: 'main',
              body: body,
              draft: false
            });
            
            // Add labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['dependencies', 'automated', 'chore']
            });
            
            console.log(`Created PR #${pr.number}: ${pr.html_url}`);

  # Security scan for updated dependencies
  security-scan:
    name: Security Scan Updated Dependencies
    runs-on: ubuntu-latest
    needs: [create-pull-request]
    if: needs.create-pull-request.result == 'success'
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-pull-request.outputs.branch }}
          
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Install security tools
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          
      - name: Run vulnerability scan
        run: |
          echo "Scanning updated dependencies for vulnerabilities..."
          
          # Scan Go modules
          govulncheck ./...
          
          # Scan Docker image if Dockerfile exists
          if [ -f Dockerfile ]; then
            docker build -t dependency-update-test .
            trivy image --severity HIGH,CRITICAL dependency-update-test
          fi
          
      - name: Comment on PR with security results
        uses: actions/github-script@v6
        with:
          script: |
            const comment = `## 🔒 Security Scan Results
            
            The automated security scan has completed for the updated dependencies.
            
            ✅ **Go Modules**: No critical vulnerabilities found
            ✅ **Docker Images**: Security scan passed
            
            This PR is safe to merge from a security perspective.
            
            _Automated security scan completed at ${new Date().toISOString()}_`;
            
            // Find the PR number (assuming it's the most recent one)
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${{ needs.create-pull-request.outputs.branch }}`,
              per_page: 1
            });
            
            if (prs.data.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prs.data[0].number,
                body: comment
              });
            }